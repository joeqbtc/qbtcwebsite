qBTC: Quantum Secure Bitcoin Sidechain
Overview
qBTC is a Bitcoin sidechain designed to protect Bitcoin users against quantum attacks while preserving Bitcoin’s core principles of decentralization and security. It implements post-quantum cryptography for transactions, uses Bitcoin’s Proof-of-Work via merged mining, and enables a two-way peg so that BTC can move between Bitcoin and qBTC. The project is open-sourced (MIT licensed) and implemented in Rust for high performance and security. The goal is to offer a quantum-resistant environment for Bitcoin users without altering Bitcoin itself, instead providing a sidechain that mirrors Bitcoin’s model (UTXO, PoW) but with quantum-safe features.
Why qBTC? Quantum computers pose a potential threat to Bitcoin’s elliptic-curve signatures; a sufficiently advanced quantum attacker could derive private keys from public keys, breaking Bitcoin’s security (anduro.io). qBTC addresses this risk proactively by integrating NIST-approved post-quantum signatures and new address types that hide public keys until they are used (mitigating quantum exposure). By acting as an opt-in sidechain, qBTC lets users safeguard their BTC holdings in a quantum-safe chain and serves as a testing ground for future Bitcoin upgrades – all while remaining compatible with Bitcoin’s ecosystem.  Additionally, qBTC provides a pathway for Bitcoin users to continue to transact securely should a cryptographically relevant quantum computer arrive prior to a complete post quantum upgrade and migration on Bitcoin.  
Key Features and Architecture
Post-Quantum Signatures (ML-DSA-87): qBTC uses the Module-Lattice Digital Signature Algorithm at NIST Security Level 5 (commonly known as ML-DSA-87, based on CRYSTALS-Dilithium) for all transactions. This provides quantum-resistant authentication, replacing ECDSA/Schnorr. ML-DSA-87 was standardized in NIST FIPS 204 (2024) and offers the highest security level (encryptionconsulting.com). Each signature is ~4.6 KB in size, so qBTC’s block and network parameters are tuned to accommodate this.


BIP-360 Quantum-Resistant Addresses (P2QRH): qBTC adopts the proposed Pay-to-Quantum-Resistant-Hash (P2QRH) address and script format (per BIP-360) to support post-quantum keys. Similar to SegWit’s design, funds are sent to a hash of a quantum-safe public key, and the full ML-DSA public key is revealed only at spending time. This ensures quantum-safe addresses: an attacker cannot obtain the public key (to attempt a quantum attack) until the moment of use, greatly reducing exposure. qBTC addresses will use a distinct Bech32m prefix (e.g., bq1...) to distinguish them, and scripts follow Bitcoin’s UTXO script model with extensions for PQ signature verification. By aligning with BIP-360 standards, qBTC makes it straightforward for wallets and exchanges to implement support for quantum-safe transactions.


Merged Mining with Bitcoin (Auxiliary PoW): qBTC’s consensus is secured by Bitcoin’s mining power through merged mining. qBTC blocks use the SHA-256 proof-of-work and can be mined alongside Bitcoin blocks without additional hardware or energy cost to miners (sovryn.com). In practice, Bitcoin miners can include qBTC’s block header hash in their Bitcoin coinbase transaction (auxiliary block commitment) to prove they found a valid qBTC block. This gives qBTC comparable security to Bitcoin – an attacker would need Bitcoin-level hashpower to 51% attack qBTC. Incentives for miners come from qBTC transaction fees (and possibly sidechain block rewards). Merge-mined sidechains like RSK have shown that miners are willing to secure a sidechain for additional fee revenue at negligible extra cost. qBTC follows this model, ensuring strong security and miner participation from day one. (Notably, Bitcoin Core remains unchanged; merge mining is enabled by qBTC’s design and miner cooperation, not by requiring changes in Bitcoin.)


Two-Way Peg (BTC ↔ qBTC): qBTC implements a two-way peg so that Bitcoin can move into the sidechain (peg-in) and back out (peg-out) at a 1:1 ratio. When users peg-in, they send BTC to a special output on the Bitcoin mainnet. That BTC is then locked, and an equivalent amount of qBTC is issued on the sidechain to the user’s qBTC address. For the initial launch, qBTC will use a federation-based peg: a trusted federation of functionaries (secured by multi-signature) observes BTC peg-in transactions and signs a corresponding qBTC issuance on the sidechain. To peg-out, the user burns their qBTC on the sidechain and the federation releases the corresponding BTC back on Bitcoin to the user’s mainnet address. This federated peg is an established approach used by production sidechains like Liquid and RSK. While it introduces a trusted set of guardians, it allows qBTC to launch immediately, using current Bitcoin capabilities (Bitcoin does not yet support trustless SPV proofs for peg-outs). The federation’s governance and security will be designed for maximum safety (e.g. geographically distributed, industry-backed members, multisig with a high threshold, hardware security modules, and auditability).


Roadmap to Trustless Peg (ZKP-SPV): Crucially, the federated peg is an interim solution. The long-term architecture of qBTC is to migrate to a trustless two-way peg using Simple Payment Verification (SPV) proofs verified via zero-knowledge proofs. In other words, the goal is that a smart contract or Bitcoin protocol upgrade will validate a proof that “qBTC coins were burned on the sidechain” to unlock BTC on the mainchain – without relying on any trusted third party. This approach is in line with the original sidechain vision of upgrading federations to cryptographically-verified peg-outs. Research and development are underway to leverage advances in zero-knowledge proof systems to prove sidechain state to the mainchain. Once Bitcoin’s protocol or covenant capabilities allow (or via an external verification service), qBTC will seamlessly transition from federation to trustless peg. This ensures the peg becomes decentralized, requiring no custodians. Until then, the federation model will be transparently operated, and the peg-out process will be limited (for example, peg-outs might be batched or delayed with notice for security) to minimize risk. Investors and users can track progress on this milestone as part of qBTC’s technical roadmap.


Scalability and Throughput (20 MB Blocks): qBTC targets a throughput and capacity comparable to Bitcoin’s, even with the larger post-quantum signatures. To achieve this, qBTC uses a block size of 20 MB (with a ~10-minute block interval, similar to Bitcoin’s timing). A 20 MB block filled with ML-DSA signatures and transactions yields roughly the same number of transactions per second as a 1 MB Bitcoin block filled with ECDSA signatures. For example, an ML-DSA-87 signature (~4600 bytes) is about 65× larger than a typical ECDSA signature (~70 bytes). By increasing the block size to 20 MB (20× Bitcoin’s base size), qBTC offsets the signature bloat so that users can send a similar volume of transactions without congestion. This design keeps qBTC’s throughput around 5–7 transactions per second (on par with Bitcoin’s ~7 TPS max) under post-quantum cryptography. We have carefully evaluated network propagation and storage trade-offs: 20 MB per block (approximately 2 MB per minute on average) is well within modern network capabilities, and several Bitcoin-derived networks (e.g. Bitcoin Cash’s 32 MB blocks) have operated stably at this scale. Nodes running qBTC will require more bandwidth and storage than Bitcoin Core nodes, but we consider this acceptable given the anticipated use-case (high-value transactions needing quantum safety). Furthermore, qBTC’s P2P layer is optimized for large blocks using efficient gossip protocols and chunked block propagation to minimize any latency impact. In summary, scalability is achieved by bigger blocks + better networking, ensuring that qBTC’s quantum security does not come at the cost of usability or throughput.


Rust Implementation & Performance: qBTC is implemented in Rust, chosen for its strong memory safety guarantees and performance. Rust’s reliability helps prevent low-level vulnerabilities, which is critical in cryptocurrency software. The codebase is being built from scratch (not a fork of Bitcoin Core) to allow a clean integration of post-quantum cryptography and modern networking. We leverage well-vetted Rust libraries for Bitcoin primitives (transaction format, merkle trees, etc.) where possible, and incorporate the NIST FIPS 204 reference implementation of ML-DSA (or an optimized library) in Rust. Rust’s fearless concurrency and rich type system make it easier to write secure consensus code and handle the 20 MB blocks with efficient parallel verification. Node networking uses a modern async runtime, with Kademlia DHT for peer discovery and a gossip protocol for block/tx relay (as prototyped in earlier Python versions of qBTC). Our initial benchmarks indicate that even with 4–5 KB signatures, block verification remains fast – verifying a 4.6 KB ML-DSA signature takes ~0.2 ms on modern CPUs, so a block with thousands of transactions can be verified in well under a second of CPU time. Thus, Rust’s speed and the parallelism opportunities (verifying different transactions concurrently) will keep block validation timely.  A proof-of-concept written in Python was released and open-sourced in May of 2025.  This early prototype provides the foundational basis for this specification.  


Bitcoin Parity and Compatibility: From a developer and user perspective, qBTC looks and feels like Bitcoin. It employs the UTXO transaction model and similar script language (augmented for PQ signatures). Block structure (header + Merkle tree of transactions) and block intervals align with Bitcoin, making integration with existing tools and workflows easier. Standard Bitcoin RPC methods (e.g. getblocktemplate, submitblock, etc.) are supported for mining, allowing miners to merge-mine qBTC with minimal changes to their mining software. Wallets can be adapted to qBTC by adding support for the new address type and signature scheme, while reusing Bitcoin’s address derivation (aside from using a different BIP32 derivation path and Bech32 prefix for quantum addresses). By maintaining this continuity, qBTC lowers the barrier for adoption – Bitcoin users and developers will require a minimal learning curve to use qBTC’s quantum-safe features.  


Pre-Commitment Mechanism (Commit-and-Reveal): Many institutions, custodians, and other bitcoin holders may be unwilling or unable to move their BTC immediately, but may wish to have the option to do so should the Bitcoin network face an attack.  With qBTC, a holder can secure their coins ahead of time by posting a PreCommit transaction to the sidechain that binds their current Bitcoin identity to a future quantum-safe key. The transaction carries a BIP-322–style message signed with the user’s ECDSA private key; the message embeds (i) the signer’s ECDSA public key, (ii) a hash of the user’s ML-DSA-87 public key, and (iii) a random nonce for uniqueness. Alongside the signature, the user includes a compact zk-SNARK that proves—without revealing any UTXO identifiers or exact values—that they control Bitcoin outputs whose combined value meets or exceeds the amount they intend to migrate. qBTC nodes verify the ECDSA signature, check the format of the ML-DSA hash, and run the on-chain SNARK verifier (e.g., a Halo 2 or Groth16 pre-compile), after which the commitment is immutably recorded while the BTC itself remains untouched on Layer 1. Whenever the user later decides to move their funds, they issue a standard peg-in that spends the proven UTXOs, reveals the full ML-DSA public key that hashes to the stored commitment, and instantly mints the corresponding qBTC, thereby converting a private, quantum-secure promise made today into real sidechain coins when the timing is right.  In the event of a quantum attack on mainnet, this allows the qBTC chain to begin to limit peg-ins to UTXO’s that have pre-committed.  Additionally, it allows the community to gauge overall willingness to move to qBTC without users having to move their coins.  This in part solves the first-mover problem by allowing a low cost/low risk path to signal intent.  
Peg-in/Peg-out Process Details
Peg-In: To move BTC into qBTC, a user sends bitcoin to a designated peg address on the Bitcoin main chain. This address is a multi-signature script controlled by the qBTC federation (e.g., an M-of-N multisig of reputable functionaries). The user then submits the Bitcoin transaction proof (e.g. an SPV proof of the deposit) to the qBTC sidechain or a federation oracle. Once the deposit is confirmed on Bitcoin (with sufficient confirmations), the federation signs a transaction on qBTC that mints an equivalent amount of qBTC to the user’s corresponding sidechain address. This qBTC is fully backed 1:1 by the locked BTC (which the federation cannot move except to fulfill peg-outs). The peg-in confirmation on qBTC may be delayed (e.g., ~100 confirmations on Bitcoin) to ensure finality and security.
Peg-Out: To redeem BTC back from qBTC, the user initiates a peg-out by sending their qBTC to a special burn address (or using a dedicated “peg-out” transaction format) on the sidechain, specifying a Bitcoin withdrawal address. This triggers the federation – after a safety delay – to send the equivalent BTC from the multisig reserve to the user’s Bitcoin address. In the sidechain, the qBTC tokens are burned/cancelled. Peg-outs via federation will likely require a processing window (for example, federation members aggregate and sign withdrawal transactions periodically, such as once per day or on a schedule) to balance security and usability. Fees: A small fee may be imposed on peg-in or peg-out operations to compensate the federation and cover operational costs (and discourage spam). This fee can be paid in BTC or qBTC depending on the direction of transfer. Initially, the federation members (potentially well-known Bitcoin companies or institutions) are incentivized by these fees and by the strategic interest in bootstrapping quantum safety. Over time, as the trustless peg is developed, these duties and fees would be phased out.
Federation Security: The federation will consist of a diverse set of functionaries (e.g., 15 out of 20 multisig) spread across different jurisdictions and organizations to minimize collusion risk (bitcoinmagazine.com). They will operate secure signing nodes with hardware isolation (HSMs) to protect keys. All peg transactions will be auditable on-chain and by external auditors. In the unlikely event that federation members attempt malicious behavior (e.g. steal funds), emergency break-glass procedures (like freezing peg-outs) could be invoked while the community responds. However, this is largely mitigated by selecting reputable entities and by economic incentives – a successful sidechain will encourage honest participation, and any breach would be highly visible and reputation-damaging. This federated model is meant to be temporary until a provably secure, decentralized alternative is ready.
Trustless Peg Roadmap: Achieving a trustless peg is a top priority. The plan is to implement a Zero-Knowledge SPV Proof system: essentially, prove to Bitcoin that a peg-out request on qBTC is valid, in a succinct proof that Bitcoin miners or nodes can verify. One concept under exploration is an OP_SPVPROOFVERIFY opcode (as proposed in some discussions) that would allow a Bitcoin script to validate a zk-SNARK proving a sidechain block header and burn transaction (medium.com). If such an opcode is adopted in Bitcoin via soft fork, qBTC could move to a trustless peg by requiring that peg-out transactions include a valid proof verified by this opcode, instead of signatures from a federation. Another approach is to involve Bitcoin miners in an interactive peg (a la Drivechain BIP-300), where miners vote to approve peg-outs based on seeing an SPV proof off-chain. Our preferred solution, however, is the cryptographic (ZKP) approach, as it does not rely on miner altruism and provides a mathematically trustless guarantee. We are collaborating with research teams on building these proofs efficiently. The timeline for this transition will depend on external factors (Bitcoin protocol upgrades, proving technology maturity), but our roadmap tentatively targets a prototype within 12–18 months and a production-ready upgrade thereafter, subject to extensive testing and Bitcoin community review.
Merged Mining and Network Security
qBTC’s use of merged mining means that Bitcoin miners can secure qBTC simultaneously as they mine Bitcoin. Here’s how it works in practice and why it’s feasible:
AuxPoW Integration: qBTC uses the Auxiliary Proof-of-Work (AuxPoW) framework similar to Namecoin/RSK. Each qBTC block header includes an extra field for an AuxPoW structure that links it to a specific Bitcoin block’s coinbase. To mine qBTC, a miner includes a hash of the qBTC block in their Bitcoin block’s coinbase data (typically in an OP_RETURN). If the Bitcoin block meets Bitcoin’s difficulty, it by definition meets the much lower qBTC difficulty (since qBTC will initially target a similar block interval and can adjust difficulty based on a fraction of Bitcoin’s hashpower). Thus, when a Bitcoin block is found, the corresponding qBTC block is also considered found and broadcast to qBTC nodes with the included AuxPoW proof. This way, every Bitcoin block is an opportunity to mine a qBTC block. Miners who choose to participate will embed qBTC commitments in their coinbase; those who don’t, simply ignore it – but they risk missing out on qBTC fees.


Incentives for Miners: By merge-mining, miners earn qBTC fees on top of their Bitcoin rewards, with virtually no extra work. All the heavy lifting (SHA-256 hashing) they do for Bitcoin counts for qBTC as well. The additional overhead is minimal: constructing a qBTC block template and adding a hash to coinbase. In return, miners collect transaction fees from qBTC transactions (which are paid in qBTC, a Bitcoin-pegged asset). Even if qBTC’s transaction volume is modest at first, any extra revenue is essentially free for miners, since it doesn’t interfere with their Bitcoin mining. Empirical data from RSK suggests merged mining can increase a participating miner’s revenue by a small but meaningful percentage. We anticipate miners will be keen to support qBTC, especially given the growing awareness of quantum risks to their future revenue (securing qBTC helps protect the Bitcoin ecosystem long-term, which indirectly protects miner business). To bootstrap security, the qBTC project will also engage directly with mining pools and offer support to integrate qBTC mining. No specialized hardware or custom consensus is required – only a software update to include qBTC’s template in their workflow.


Chain Difficulty & Independence: qBTC will dynamically adjust its mining difficulty so that blocks stay on a 10-minute target, despite not all Bitcoin miners participating initially. If only a subset of hashpower merge-mines, qBTC’s difficulty will be set proportional to that subset’s hashpower. This ensures reliable block times on qBTC. In effect, qBTC piggybacks on Bitcoin’s hashpower but has its own difficulty adjustment algorithm (similar to Bitcoin’s, e.g. adjusting every ~2016 blocks) to respond to changes in participation. In the unlikely case of very low participation (few miners merge-mining), qBTC’s difficulty will drop to allow those few miners to still find blocks regularly. The genesis difficulty will assume a modest percentage of Bitcoin’s hashpower and adjust from there. Over time, as more miners join, qBTC difficulty will rise accordingly, further strengthening security.


Reorg Security: One nuance of merge-mining is that qBTC blocks are found when Bitcoin blocks are found. This means if Bitcoin experiences a reorg of depth N, qBTC could also experience a reorg up to depth N (since the qBTC blocks tied to those orphaned Bitcoin blocks would be orphaned too). However, Bitcoin reorgs are typically shallow (1-2 blocks at most), so qBTC will inherit that stability. Additionally, the qBTC nodes will validate that the merged-mined proofs correspond to the longest Bitcoin chain, and ignore any qBTC blocks tied to stale Bitcoin blocks. In short, qBTC’s consensus is effectively locked to Bitcoin’s: if Bitcoin finality is secure, qBTC’s is as well. This is acceptable and similar to other Bitcoin merge-mined systems. Users should wait for a few Bitcoin confirmations (e.g. 6) worth of qBTC blocks for high assurance, same as they would on Bitcoin mainnet.


Double-Spend and 51% Attack: An attacker trying to 51% attack qBTC (e.g., to double-spend or censor on qBTC) would need to outmine the honest merged miners. Because qBTC is leveraging Bitcoin’s hashing algorithm and (ideally) a significant portion of its miners, an attack is extremely difficult without simultaneously attacking Bitcoin. If an attacker had quantum computing capabilities to challenge qBTC’s PoW, they would equally threaten Bitcoin’s PoW – at which point proof-of-work itself would be in question. Mitigating that scenario is beyond qBTC’s scope (and would be a broader Bitcoin issue). However, as quantum mining is far beyond current reality and the first quantum threats are to signatures, qBTC’s focus on signature security addresses the most pressing quantum risk. Meanwhile, PoW remains a robust defense; qBTC sticks with Bitcoin’s proven game-theoretic security, reinforcing that our security model is Bitcoin’s security model.


Development Roadmap and Milestones
Phase 1 – Prototype and Proof-of-Concept (Q2 2025): An early prototype (Devnet) was released in late May of 2025.  Written in Python, this early implementation demonstrated the feasibility of a Bitcoin-like blockchain with ML-DSA signatures.
Phase 2 – MVP and Testnet (Q4 2025): The initial implementation of qBTC will be deployed on a public testnet. This MVP will include the core features: ML-DSA-87 signature support, P2QRH address format, 20 MB blocks, merged mining support, block explorers, and a basic federated peg with a small federation (for testing). Goals of the testnet phase are to battle-test consensus (especially merged mining coordination and network stability with large blocks) and to integrate with wallets/mining pools in a low-risk environment. We will invite Bitcoin developers, miners, and security researchers to review the code and help identify any issues. During this phase, we will also publish detailed documentation and developer guides to facilitate integrations.
Phase 3 – Mainnet Launch with Federated Peg (Q2 2026): After thorough testing and audits, qBTC mainnet will launch. The federation for mainnet peg will consist of well-known, reputable institutions (to be announced prior to launch) operating under a federation charter. The peg-in process will be enabled from day one, allowing users to start moving BTC into qBTC. We expect an initial period of low volume as the system gains trust. Miner support will be actively fostered: we aim to have a significant percentage of Bitcoin’s hashrate already onboard at launch for merged mining. In this phase, qBTC will not issue any block rewards, and the fee structure will be calibrated to incentivize security while maintaining the 1:1 peg. All code will be open-source (on GitHub) under the MIT License and the project will begin building an open-source contributor community.  The pre-commitment to PQ addresses will launch at or around the same time as mainnet.
Phase 4 – Ecosystem Integration (2026-2027): With mainnet live, the focus shifts to usage and ecosystem. We will work with wallet providers to add qBTC support (so users can easily send/receive on the sidechain). Exchanges and custodians will be approached to support qBTC deposits/withdrawals, effectively treating qBTC as equivalent to BTC (but on a different chain). This will greatly increase the utility and reach of qBTC. During this phase, any necessary interoperability tools will be developed – for example, a bridge service or wallet plugin that automates peg-ins/peg-outs for users. We will also promote qBTC as a safe haven for long-term Bitcoin holdings (for individuals and institutions worried about quantum threats), possibly in collaboration with custody solutions that can handle the new addresses and keys. On the technical side, minor upgrades may be deployed (with community consensus) to optimize performance or security based on real-world data. qBTC’s consensus rules and script system are intentionally similar to Bitcoin’s, so upgrades will follow a cautious approach (soft-fork style upgrades if needed, with widespread notification and opt-in).
Phase 5 – Trustless Peg Transition (tentative 2027+): In parallel to the above, R&D efforts will continue on removing the federated peg. This phase will commence when a viable SPV proof mechanism is ready. If a Bitcoin soft fork (or drivechain-like mechanism) has been adopted to support sidechain proofs, we will implement the necessary changes on qBTC and coordinate a peg-out migration. The migration plan would likely involve establishing a new pegging contract or script on Bitcoin that recognizes cryptographic proofs from qBTC. The federation would gradually hand off control: for example, a period during which peg-outs require both federation signatures and a ZK proof, and later only the ZK proof (once confidence is high). The ultimate milestone is achieving a fully trustless two-way peg, after which the federation’s role is dissolved (they would only remain as emergency managers if something unforeseen occurs, or simply disband). Achieving this will mark qBTC as a completely decentralized sidechain with the same trust assumptions as Bitcoin itself. It would also validate the model for potentially bringing similar quantum-safe features into Bitcoin mainnet one day.
Beyond – Future Innovations: qBTC’s immediate mandate is to secure Bitcoin’s present model against quantum threats. In the long term, qBTC can serve as a platform for further innovation: new cryptographic protocols (e.g., post-quantum stateful signatures or zero-knowledge-based smart contracts) can be tested here without risking Bitcoin mainnet. qBTC could also explore performance upgrades (e.g., if larger blocks or faster block times prove safe, qBTC could increase those to further boost throughput). Since qBTC is open source and community-driven, its evolution will be guided by the needs of its users and the broader Bitcoin community. Any changes will be proposed and discussed through a process analogous to BIPs (we’ll have qBIPs) to ensure transparency and consensus.
Open Source and Licensing
qBTC is released under the MIT License, the same permissive open-source license used by Bitcoin Core. This choice of license ensures that qBTC’s code can be freely reviewed, copied, modified, and integrated by anyone, fostering a broad developer and industry collaboration. All components of the project – from the core node software, the cryptographic libraries (where possible), to integration tools – are being developed or re-used under MIT-compatible licenses. Care has been taken to only incorporate third-party libraries that are permissively licensed. By using MIT licensing, we align with Bitcoin’s ethos of open development and allow any improvements in qBTC to potentially feed back into Bitcoin or other projects. Contributors retain copyright to their code but agree to MIT licensing for the project.
From day one of open-sourcing (which occurred at the Bitcoin 2025 conference), the repository is publicly accessible for auditing. We invite the security and crypto community to audit the ML-DSA implementation, the peg contracts, and all consensus logic. An external security audit will also be conducted before mainnet launch. The use of Rust, plus robust testing (unit, integration, property-based tests) and formal reviews, is meant to maintain high code quality. Any critical issues discovered will be transparently disclosed and fixed. Ultimately, qBTC’s credibility comes from peer review and the trust the community places in its open-source process – the MIT license is a key enabler of that trust.
(Note: “ML-DSA” refers to the Module-Lattice-based Digital Signature Algorithm standardized in NIST FIPS 204, which corresponds to the CRYSTALS-Dilithium family. “P2QRH” refers to Pay-to-Quantum-Resistant-Hash addresses as per Bitcoin Improvement Proposal 360. All trademarks and Bitcoin references are properties of their respective owners.)
Conclusion
qBTC represents a bold but practical step towards securing Bitcoin’s future. It marries the robustness of Bitcoin’s design (Proof-of-Work, UTXO, decentralization) with cutting-edge post-quantum cryptography and a forward-looking sidechain architecture. By providing a quantum-safe haven for BTC users, qBTC mitigates a major long-term risk before it becomes an immediate threat. At the same time, qBTC is an innovation sandbox: it allows the Bitcoin community to gain experience with quantum-resistant tech and two-way peg mechanisms in a real economic setting, without altering Bitcoin L1. The insights gained from qBTC’s deployment could directly inform how and when Bitcoin itself upgrades to quantum-resistant signatures in the future.
Additionally, qBTC offers a clear value proposition: it extends Bitcoin’s longevity and utility in the face of technological change, potentially unlocking new use cases (e.g. quantum-safe custody for institutions) and ensuring Bitcoin remains the trustworthy store-of-value it is today. The project’s roadmap is concrete – starting with a federated model that works now, and iterating toward a trustless, decentralized model as technology permits. Each component of the system is built on known principles and standards (NIST cryptography, Bitcoin’s battle-tested mining model, established sidechain approaches), reducing unknown risks.
In summary, qBTC is technically feasible and grounded in best practices: larger-block propagation has precedent, merged mining has been successfully deployed, and ML-DSA signatures are standardized and performant. By adhering to open standards and collaborating with the Bitcoin ecosystem (developers, miners, exchanges, researchers), qBTC aims to be not just a product, but a community-driven solution. We envision a future where, if quantum threats emerge, the Bitcoin community can smoothly transition to safety – with qBTC’s architecture either guiding Bitcoin upgrades or serving as the failsafe harbor.
qBTC’s innovation lies in its synthesis: bringing together post-quantum security, sidechain mechanics, and Bitcoin’s ethos. With a clear plan, strong technical foundations, and a commitment to open development, qBTC is on track to deliver an enterprise-ready, quantum-secure Bitcoin sidechain. We welcome the support and participation of all stakeholders in making Bitcoin quantum-proof, one block at a time.
